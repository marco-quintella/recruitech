generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applications {
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  processId String    @map("process_id") @db.Uuid
  profileId String    @map("profile_id") @db.Uuid
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  processes processes @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles  profiles  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([processId])
  @@index([profileId])
}

model companies {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String       @unique(map: "companies_name_index")
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)
  logo              String?
  hqLocation        String?      @map("hq_location") @db.Uuid
  companySize       companySize? @map("company_size")
  facebook          String?
  instagram         String?
  linkedin          String?
  twitter           String?
  website           String?
  short_description String?
  location          locations?   @relation(fields: [hqLocation], references: [id], onDelete: NoAction, onUpdate: NoAction)
  processes         processes[]
  users             users[]
}

model discards {
  processId   String?    @map("process_id") @db.Uuid
  userId      String     @map("user_id") @db.Uuid
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId String?    @map("candidate_id") @db.Uuid
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamp(6)
  candidate   users?     @relation("discards_candidate_idTousers", fields: [candidateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  processes   processes? @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        users      @relation("discards_user_idTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model emailTokens {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("email_tokens")
}

model favorites {
  processId   String?    @map("process_id") @db.Uuid
  userId      String     @map("user_id") @db.Uuid
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId String?    @map("candidate_id") @db.Uuid
  candidate   users?     @relation("favorites_candidate_idTousers", fields: [candidateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  processes   processes? @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        users      @relation("favorites_user_idTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model jobTitles {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)
  processes processes[]
  profiles  profiles[]

  @@map("job_titles")
}

model locations {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country   String
  state     String?
  city      String?
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)
  companies companies[]
  processes processes[]
  profiles  profiles[]
}

model processes {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId       String            @map("company_id") @db.Uuid
  userId          String            @map("user_id") @db.Uuid
  processType     processType       @map("process_type")
  title           String
  description     String
  contractType    contractType      @map("contract_type")
  experienceLevel experienceLevel?  @map("experience_level")
  salary0         Decimal?          @map("salary_0") @db.Decimal
  salary1         Decimal?          @map("salary_1") @db.Decimal
  email           String?
  link            String?
  finishedAt      DateTime?         @map("finished_at") @db.Timestamp(6)
  cancelledAt     DateTime?         @map("cancelled_at") @db.Timestamp(6)
  chosenUserId    String?           @map("choosen_user_id") @db.Uuid
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  remote          remoteType        @default(on_site)
  applications    applications[]
  discards        discards[]
  favorites       favorites[]
  chosenUser      users?            @relation("processes_chosen_user_idTousers", fields: [chosenUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company         companies         @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            users             @relation("processes_user_idTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobTitles       jobTitles[]
  locations       locations[]
  tags            tags[]
  recommendations recommendations[]
}

model profiles {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  presentation String?
  userId       String         @map("user_id") @db.Uuid @unique
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
  locationId   String?        @map("location_id") @db.Uuid
  cv           String?
  applications applications[]
  locations    locations?     @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profiles_location_id_locations_id_fk")
  user         users          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profiles_user_id_users_id_fk")
  jobTitles    jobTitles[]
  tags         tags[]
}

model recommendations {
  processId String    @map("process_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  processes processes @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "recommendations_process_id_processes_id_fk")
  users     users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "recommendations_user_id_users_id_fk")

  @@id([processId, userId])
}

model tags {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)
  processes processes[]
  profiles  profiles[]

  @@index([name], map: "tags_name_index")
}

model users {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  email              String            @unique(map: "users_email_unique")
  password           String
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  role               role
  companyId          String?           @map("company_id") @db.Uuid
  confirmedEmail     Boolean           @default(false) @map("confirmed_email")
  invitePending      Boolean           @default(false) @map("invite_pending")
  candidateDiscards  discards[]        @relation("discards_candidate_idTousers")
  userDiscards       discards[]        @relation("discards_user_idTousers")
  email_tokens       emailTokens[]
  candidateFavorites favorites[]       @relation("favorites_candidate_idTousers")
  userFavorites      favorites[]       @relation("favorites_user_idTousers")
  chosenUser         processes[]       @relation("processes_chosen_user_idTousers")
  processes          processes[]       @relation("processes_user_idTousers")
  profiles           profiles[]
  recommendations    recommendations[]
  company          companies?        @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_company_id_companies_id_fk")
}

enum companySize {
  to5         @map("1to5")
  to10        @map("6to10")
  to30        @map("11to30")
  to50        @map("31to50")
  to100       @map("51to100")
  moreThan100

  @@map("company_size")
}

enum contractType {
  full_time
  part_time
  contractor
  internship

  @@map("contract_type")
}

enum experienceLevel {
  entry
  intermediate
  senior

  @@map("experience_level")
}

enum processType {
  platform
  email
  link

  @@map("process_type")
}

enum remoteType {
  full_remote
  hybrid
  on_site

  @@map("remote_type")
}

enum role {
  system
  company_admin
  recruiter
  candidate
}
